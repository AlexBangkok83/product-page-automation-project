<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
    <link rel="stylesheet" href="/css/style.css">
    <style>
        .company-profile-container {
            background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
            min-height: calc(100vh - 80px);
            padding: 2rem 0;
        }
        
        .profile-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 1.5rem;
            padding: 2.5rem;
            margin-bottom: 2rem;
            box-shadow: 0 1rem 3rem rgba(102, 126, 234, 0.2);
        }
        
        .profile-header h1 {
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
        }
        
        .profile-header p {
            font-size: 1.1rem;
            opacity: 0.9;
            margin-bottom: 0;
        }
        
        .stats-card {
            background: white;
            border-radius: 1rem;
            padding: 1.5rem;
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.08);
            border: none;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        
        .stats-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.15);
        }
        
        .stats-number {
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
        }
        
        .stats-label {
            color: #6c757d;
            font-weight: 500;
            margin-bottom: 0;
        }
        
        .shopify-stores-section {
            background: white;
            border-radius: 1.5rem;
            padding: 2.5rem;
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.08);
            margin-top: 2rem;
        }
        
        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
            padding-bottom: 1rem;
            border-bottom: 2px solid #f8f9fa;
        }
        
        .section-title {
            font-size: 1.75rem;
            font-weight: 600;
            color: #495057;
            margin: 0;
        }
        
        .btn-add-store {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border: none;
            border-radius: 0.75rem;
            padding: 0.75rem 1.5rem;
            font-weight: 600;
            color: white;
            transition: all 0.3s ease;
        }
        
        .btn-add-store:hover {
            transform: translateY(-2px);
            box-shadow: 0 0.5rem 1rem rgba(102, 126, 234, 0.3);
            color: white;
        }
        
        .store-card {
            background: white;
            border: 2px solid #e9ecef;
            border-radius: 1rem;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            transition: all 0.3s ease;
            position: relative;
        }
        
        .store-card:hover {
            border-color: #667eea;
            transform: translateY(-2px);
            box-shadow: 0 0.5rem 1rem rgba(102, 126, 234, 0.1);
        }
        
        .store-card.connected {
            border-color: #22c55e;
            background: linear-gradient(135deg, rgba(34, 197, 94, 0.05) 0%, rgba(16, 185, 129, 0.05) 100%);
        }
        
        .store-card.failed {
            border-color: #ef4444;
            background: linear-gradient(135deg, rgba(239, 68, 68, 0.05) 0%, rgba(220, 38, 38, 0.05) 100%);
        }
        
        .store-card.inactive {
            opacity: 0.6;
            background: #f8f9fa;
        }
        
        .store-header {
            display: flex;
            justify-content: space-between;
            align-items: start;
            margin-bottom: 1rem;
        }
        
        .store-name {
            font-size: 1.25rem;
            font-weight: 600;
            color: #495057;
            margin-bottom: 0.25rem;
        }
        
        .store-domain {
            color: #6c757d;
            font-size: 0.9rem;
        }
        
        .status-badge {
            padding: 0.5rem 1rem;
            border-radius: 2rem;
            font-size: 0.8rem;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .status-connected {
            background: #22c55e;
            color: white;
        }
        
        .status-failed {
            background: #ef4444;
            color: white;
        }
        
        .status-pending {
            background: #f59e0b;
            color: white;
        }
        
        .store-info {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: 1rem;
            margin: 1rem 0;
        }
        
        .info-item {
            text-align: center;
            padding: 0.75rem;
            background: rgba(102, 126, 234, 0.05);
            border-radius: 0.5rem;
        }
        
        .info-value {
            font-weight: 600;
            color: #495057;
            display: block;
        }
        
        .info-label {
            font-size: 0.8rem;
            color: #6c757d;
            margin-top: 0.25rem;
        }
        
        .store-actions {
            display: flex;
            gap: 0.5rem;
            flex-wrap: wrap;
        }
        
        .btn-action {
            padding: 0.5rem 1rem;
            border-radius: 0.5rem;
            font-size: 0.85rem;
            font-weight: 500;
            border: none;
            transition: all 0.2s ease;
        }
        
        .btn-test {
            background: #3b82f6;
            color: white;
        }
        
        .btn-test:hover {
            background: #2563eb;
            color: white;
        }
        
        .btn-edit {
            background: #f59e0b;
            color: white;
        }
        
        .btn-edit:hover {
            background: #d97706;
            color: white;
        }
        
        .btn-toggle {
            background: #6b7280;
            color: white;
        }
        
        .btn-toggle:hover {
            background: #4b5563;
            color: white;
        }
        
        .btn-delete {
            background: #ef4444;
            color: white;
        }
        
        .btn-delete:hover {
            background: #dc2626;
            color: white;
        }
        
        .empty-state {
            text-align: center;
            padding: 4rem 2rem;
            color: #6c757d;
        }
        
        .empty-icon {
            font-size: 4rem;
            margin-bottom: 1rem;
            opacity: 0.5;
        }
        
        .modal-content {
            border-radius: 1rem;
            border: none;
            box-shadow: 0 2rem 4rem rgba(0, 0, 0, 0.15);
        }
        
        .modal-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 1rem 1rem 0 0;
            border-bottom: none;
        }
        
        .modal-title {
            font-weight: 600;
        }
        
        .btn-close {
            filter: invert(1);
        }
        
        .form-floating label {
            color: #6c757d;
        }
        
        .form-control:focus,
        .form-select:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
        }
        
        .loading-spinner {
            display: none;
            width: 1rem;
            height: 1rem;
            border: 2px solid transparent;
            border-top: 2px solid currentColor;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .alert-floating {
            position: fixed;
            top: 1rem;
            right: 1rem;
            z-index: 1060;
            min-width: 300px;
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
        }
        
        @media (max-width: 768px) {
            .profile-header {
                padding: 2rem;
                text-align: center;
            }
            
            .profile-header h1 {
                font-size: 2rem;
            }
            
            .section-header {
                flex-direction: column;
                gap: 1rem;
                align-items: stretch;
            }
            
            .store-header {
                flex-direction: column;
                gap: 0.5rem;
            }
            
            .store-actions {
                justify-content: center;
            }
            
            .store-info {
                grid-template-columns: repeat(2, 1fr);
            }
        }
    </style>
</head>
<body class="admin-page">
    <%- include('../partials/admin-nav', { currentPage: 'company-profile' }) %>
    
    <div class="company-profile-container">
        <div class="container">
            <!-- Header -->
            <div class="profile-header">
                <div class="row align-items-center">
                    <div class="col-md-8">
                        <h1><i class="bi bi-building me-3"></i>Company Profile</h1>
                        <p>Manage your Shopify store connections and streamline store creation</p>
                    </div>
                    <div class="col-md-4 text-md-end">
                        <!-- Removed back button as navigation is now in header -->
                    </div>
                </div>
            </div>

            <!-- Statistics Cards -->
            <div class="row mb-4" id="statisticsRow">
                <div class="col-md-3 col-sm-6 mb-3">
                    <div class="card stats-card text-center">
                        <div class="stats-number text-primary" id="totalStores">0</div>
                        <div class="stats-label">Total Stores</div>
                    </div>
                </div>
                <div class="col-md-3 col-sm-6 mb-3">
                    <div class="card stats-card text-center">
                        <div class="stats-number text-success" id="connectedStores">0</div>
                        <div class="stats-label">Connected</div>
                    </div>
                </div>
                <div class="col-md-3 col-sm-6 mb-3">
                    <div class="card stats-card text-center">
                        <div class="stats-number text-warning" id="pendingStores">0</div>
                        <div class="stats-label">Pending</div>
                    </div>
                </div>
                <div class="col-md-3 col-sm-6 mb-3">
                    <div class="card stats-card text-center">
                        <div class="stats-number text-danger" id="failedStores">0</div>
                        <div class="stats-label">Failed</div>
                    </div>
                </div>
            </div>

            <!-- Shopify Stores Section -->
            <div class="shopify-stores-section">
                <div class="section-header">
                    <h2 class="section-title">
                        <i class="bi bi-shop me-2"></i>Shopify Store Connections
                    </h2>
                    <button class="btn btn-add-store" data-bs-toggle="modal" data-bs-target="#addStoreModal">
                        <i class="bi bi-plus-circle me-2"></i>Add Shopify Store
                    </button>
                </div>

                <!-- Loading State -->
                <div id="loadingState" class="text-center py-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-3 text-muted">Loading your Shopify stores...</p>
                </div>

                <!-- Stores List -->
                <div id="storesList" style="display: none;">
                    <!-- Stores will be loaded here -->
                </div>

                <!-- Empty State -->
                <div id="emptyState" class="empty-state" style="display: none;">
                    <div class="empty-icon">
                        <i class="bi bi-shop"></i>
                    </div>
                    <h4>No Shopify Stores Connected</h4>
                    <p class="mb-4">Connect your first Shopify store to streamline your store creation process.</p>
                    <button class="btn btn-add-store" data-bs-toggle="modal" data-bs-target="#addStoreModal">
                        <i class="bi bi-plus-circle me-2"></i>Add Your First Shopify Store
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Add/Edit Store Modal -->
    <div class="modal fade" id="addStoreModal" tabindex="-1" aria-labelledby="addStoreModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addStoreModalLabel">
                        <i class="bi bi-shop me-2"></i>Add Shopify Store
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="storeForm">
                        <input type="hidden" id="storeUuid" name="uuid">
                        
                        <div class="row">
                            <div class="col-12">
                                <div class="form-floating mb-3">
                                    <input type="text" class="form-control" id="storeNickname" name="nickname" 
                                           placeholder="My Store" required>
                                    <label for="storeNickname">
                                        <i class="bi bi-tag me-2"></i>Store Nickname
                                    </label>
                                    <div class="form-text">A friendly name to identify this store</div>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-floating mb-3">
                                    <input type="text" class="form-control" id="shopifyDomain" name="shopifyDomain" 
                                           placeholder="mystore.myshopify.com" required>
                                    <label for="shopifyDomain">
                                        <i class="bi bi-globe me-2"></i>Shopify Domain
                                    </label>
                                    <div class="form-text">Your Shopify store domain</div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-floating mb-3">
                                    <input type="password" class="form-control" id="accessToken" name="accessToken" 
                                           placeholder="shpat_xxxxxxxxxxxxx" required>
                                    <label for="accessToken">
                                        <i class="bi bi-key me-2"></i>Access Token
                                    </label>
                                    <div class="form-text">Private app access token</div>
                                </div>
                            </div>
                        </div>

                        <div class="alert alert-info">
                            <h6><i class="bi bi-lightbulb me-2"></i>How to get your Shopify access token:</h6>
                            <ol class="mb-0 small">
                                <li>Go to your Shopify admin → Settings → Apps and sales channels</li>
                                <li>Click "Develop apps" → "Create an app"</li>
                                <li>Configure API scopes: read_products, read_orders, read_customers</li>
                                <li>Generate and copy the access token</li>
                            </ol>
                        </div>

                        <!-- Connection Test Results -->
                        <div id="connectionResults" class="alert" style="display: none;">
                            <div id="connectionSuccess" style="display: none;">
                                <h6><i class="bi bi-check-circle me-2"></i>Connection Successful!</h6>
                                <div class="row small">
                                    <div class="col-md-6">
                                        <strong>Shop Name:</strong> <span id="resultShopName">-</span>
                                    </div>
                                    <div class="col-md-6">
                                        <strong>Products:</strong> <span id="resultProductCount">-</span>
                                    </div>
                                </div>
                            </div>
                            <div id="connectionError" style="display: none;">
                                <h6><i class="bi bi-exclamation-triangle me-2"></i>Connection Failed</h6>
                                <p id="errorMessage" class="mb-0"></p>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-primary" id="testConnectionBtn">
                        <i class="bi bi-shield-check me-2"></i>Test Connection
                        <span class="loading-spinner ms-2"></span>
                    </button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="saveStoreBtn">
                        <i class="bi bi-save me-2"></i>Save Store
                        <span class="loading-spinner ms-2"></span>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title" id="deleteModalLabel">
                        <i class="bi bi-trash me-2"></i>Confirm Deletion
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this Shopify store connection?</p>
                    <div class="alert alert-warning">
                        <strong id="deleteStoreName"></strong> will be permanently removed from your company profile.
                        This action cannot be undone.
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" id="confirmDeleteBtn">
                        <i class="bi bi-trash me-2"></i>Delete Store
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        class CompanyProfileManager {
            constructor() {
                this.stores = [];
                this.currentEditingStore = null;
                this.init();
            }

            async init() {
                this.setupEventListeners();
                await this.loadStores();
            }

            setupEventListeners() {
                // Test connection button
                document.getElementById('testConnectionBtn').addEventListener('click', () => {
                    this.testConnection();
                });

                // Save store button
                document.getElementById('saveStoreBtn').addEventListener('click', () => {
                    this.saveStore();
                });

                // Confirm delete button
                document.getElementById('confirmDeleteBtn').addEventListener('click', () => {
                    this.confirmDelete();
                });

                // Reset modal when it closes
                document.getElementById('addStoreModal').addEventListener('hidden.bs.modal', () => {
                    this.resetModal();
                });
            }

            async loadStores() {
                try {
                    this.showLoadingState();
                    
                    const response = await fetch('/api/company-shopify-stores');
                    const data = await response.json();
                    
                    if (data.success) {
                        this.stores = data.stores;
                        this.updateStatistics(data.summary);
                        this.renderStores();
                    } else {
                        this.showAlert('Failed to load stores', 'danger');
                    }
                } catch (error) {
                    console.error('Load stores error:', error);
                    this.showAlert('Failed to load stores', 'danger');
                } finally {
                    this.hideLoadingState();
                }
            }

            showLoadingState() {
                document.getElementById('loadingState').style.display = 'block';
                document.getElementById('storesList').style.display = 'none';
                document.getElementById('emptyState').style.display = 'none';
            }

            hideLoadingState() {
                document.getElementById('loadingState').style.display = 'none';
            }

            updateStatistics(summary) {
                document.getElementById('totalStores').textContent = summary.total;
                document.getElementById('connectedStores').textContent = summary.connected;
                document.getElementById('pendingStores').textContent = summary.pending;
                document.getElementById('failedStores').textContent = summary.failed;
            }

            renderStores() {
                const storesList = document.getElementById('storesList');
                const emptyState = document.getElementById('emptyState');
                
                if (this.stores.length === 0) {
                    storesList.style.display = 'none';
                    emptyState.style.display = 'block';
                    return;
                }
                
                storesList.style.display = 'block';
                emptyState.style.display = 'none';
                
                storesList.innerHTML = this.stores.map(store => this.renderStoreCard(store)).join('');
                
                // Add event listeners to action buttons
                this.stores.forEach(store => {
                    const card = document.querySelector(`[data-store-id="${store.uuid}"]`);
                    if (card) {
                        card.querySelector('.btn-test').addEventListener('click', () => this.testStoreConnection(store.uuid));
                        card.querySelector('.btn-edit').addEventListener('click', () => this.editStore(store));
                        card.querySelector('.btn-toggle').addEventListener('click', () => this.toggleStoreStatus(store.uuid));
                        card.querySelector('.btn-delete').addEventListener('click', () => this.showDeleteModal(store));
                    }
                });
            }

            renderStoreCard(store) {
                const statusClass = store.connection_status === 'connected' ? 'connected' : 
                                  store.connection_status === 'failed' ? 'failed' : '';
                
                const inactiveClass = !store.is_active ? 'inactive' : '';
                
                const statusBadge = store.connection_status === 'connected' ? 'status-connected' :
                                  store.connection_status === 'failed' ? 'status-failed' : 'status-pending';

                return `
                    <div class="store-card ${statusClass} ${inactiveClass}" data-store-id="${store.uuid}">
                        <div class="store-header">
                            <div>
                                <div class="store-name">${this.escapeHtml(store.nickname)}</div>
                                <div class="store-domain">${this.escapeHtml(store.shopify_domain)}</div>
                            </div>
                            <div class="d-flex align-items-center gap-2">
                                ${!store.is_active ? '<span class="badge bg-secondary">Inactive</span>' : ''}
                                <span class="status-badge ${statusBadge}">${store.connection_status}</span>
                            </div>
                        </div>

                        ${store.shopify_shop_name ? `
                        <div class="store-info">
                            <div class="info-item">
                                <span class="info-value">${this.escapeHtml(store.shopify_shop_name)}</span>
                                <div class="info-label">Shop Name</div>
                            </div>
                            <div class="info-item">
                                <span class="info-value">${store.product_count || 0}</span>
                                <div class="info-label">Products</div>
                            </div>
                            <div class="info-item">
                                <span class="info-value">${store.shopify_currency || 'N/A'}</span>
                                <div class="info-label">Currency</div>
                            </div>
                            <div class="info-item">
                                <span class="info-value">${store.last_validated_at ? new Date(store.last_validated_at).toLocaleDateString() : 'Never'}</span>
                                <div class="info-label">Last Validated</div>
                            </div>
                        </div>
                        ` : ''}

                        ${store.validation_error ? `
                        <div class="alert alert-danger alert-sm mb-3">
                            <small><i class="bi bi-exclamation-triangle me-1"></i>${this.escapeHtml(store.validation_error)}</small>
                        </div>
                        ` : ''}

                        <div class="store-actions">
                            <button class="btn btn-action btn-test">
                                <i class="bi bi-shield-check me-1"></i>Test
                            </button>
                            <button class="btn btn-action btn-edit">
                                <i class="bi bi-pencil me-1"></i>Edit
                            </button>
                            <button class="btn btn-action btn-toggle">
                                <i class="bi bi-${store.is_active ? 'pause' : 'play'} me-1"></i>
                                ${store.is_active ? 'Deactivate' : 'Activate'}
                            </button>
                            <button class="btn btn-action btn-delete">
                                <i class="bi bi-trash me-1"></i>Delete
                            </button>
                        </div>
                    </div>
                `;
            }

            async testConnection() {
                const form = document.getElementById('storeForm');
                const formData = new FormData(form);
                
                const nickname = formData.get('nickname');
                const shopifyDomain = formData.get('shopifyDomain');
                const accessToken = formData.get('accessToken');
                
                if (!nickname || !shopifyDomain || !accessToken) {
                    this.showAlert('Please fill in all fields', 'warning');
                    return;
                }
                
                const testBtn = document.getElementById('testConnectionBtn');
                const originalText = testBtn.innerHTML;
                
                try {
                    this.setButtonLoading(testBtn, true);
                    this.hideConnectionResults();
                    
                    const response = await fetch('/api/validate-shopify', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            shopifyDomain: shopifyDomain,
                            accessToken: accessToken
                        })
                    });
                    
                    const data = await response.json();
                    
                    if (data.success) {
                        this.showConnectionResults(true, data);
                    } else {
                        this.showConnectionResults(false, null, data.error);
                    }
                } catch (error) {
                    console.error('Test connection error:', error);
                    this.showConnectionResults(false, null, 'Failed to test connection');
                } finally {
                    this.setButtonLoading(testBtn, false);
                    testBtn.innerHTML = originalText;
                }
            }

            async saveStore() {
                const form = document.getElementById('storeForm');
                const formData = new FormData(form);
                
                const nickname = formData.get('nickname');
                const shopifyDomain = formData.get('shopifyDomain');
                const accessToken = formData.get('accessToken');
                const uuid = formData.get('uuid');
                
                if (!nickname || !shopifyDomain || !accessToken) {
                    this.showAlert('Please fill in all fields', 'warning');
                    return;
                }
                
                const saveBtn = document.getElementById('saveStoreBtn');
                const originalText = saveBtn.innerHTML;
                
                try {
                    this.setButtonLoading(saveBtn, true);
                    
                    const isEdit = !!uuid;
                    const url = isEdit ? `/api/company-shopify-stores/${uuid}` : '/api/company-shopify-stores';
                    const method = isEdit ? 'PUT' : 'POST';
                    
                    const response = await fetch(url, {
                        method: method,
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            nickname: nickname,
                            shopifyDomain: shopifyDomain,
                            accessToken: accessToken
                        })
                    });
                    
                    const data = await response.json();
                    
                    if (data.success) {
                        this.showAlert(`Store ${isEdit ? 'updated' : 'created'} successfully!`, 'success');
                        bootstrap.Modal.getInstance(document.getElementById('addStoreModal')).hide();
                        await this.loadStores();
                    } else {
                        this.showAlert(data.error || `Failed to ${isEdit ? 'update' : 'create'} store`, 'danger');
                    }
                } catch (error) {
                    console.error('Save store error:', error);
                    this.showAlert('Failed to save store', 'danger');
                } finally {
                    this.setButtonLoading(saveBtn, false);
                    saveBtn.innerHTML = originalText;
                }
            }

            async testStoreConnection(uuid) {
                try {
                    const response = await fetch(`/api/company-shopify-stores/${uuid}/test-connection`, {
                        method: 'POST'
                    });
                    
                    const data = await response.json();
                    
                    if (data.success) {
                        this.showAlert('Connection test successful!', 'success');
                    } else {
                        this.showAlert(`Connection test failed: ${data.error}`, 'danger');
                    }
                    
                    await this.loadStores();
                } catch (error) {
                    console.error('Test store connection error:', error);
                    this.showAlert('Failed to test connection', 'danger');
                }
            }

            editStore(store) {
                this.currentEditingStore = store;
                
                // Populate form
                document.getElementById('storeUuid').value = store.uuid;
                document.getElementById('storeNickname').value = store.nickname;
                document.getElementById('shopifyDomain').value = store.shopify_domain;
                document.getElementById('accessToken').value = ''; // Don't pre-fill for security
                
                // Update modal title
                document.getElementById('addStoreModalLabel').innerHTML = 
                    '<i class="bi bi-pencil me-2"></i>Edit Shopify Store';
                
                this.hideConnectionResults();
                
                // Show modal
                new bootstrap.Modal(document.getElementById('addStoreModal')).show();
            }

            async toggleStoreStatus(uuid) {
                try {
                    const response = await fetch(`/api/company-shopify-stores/${uuid}/toggle-status`, {
                        method: 'PATCH'
                    });
                    
                    const data = await response.json();
                    
                    if (data.success) {
                        this.showAlert(data.message, 'success');
                        await this.loadStores();
                    } else {
                        this.showAlert('Failed to toggle store status', 'danger');
                    }
                } catch (error) {
                    console.error('Toggle store status error:', error);
                    this.showAlert('Failed to toggle store status', 'danger');
                }
            }

            showDeleteModal(store) {
                this.currentEditingStore = store;
                document.getElementById('deleteStoreName').textContent = store.nickname;
                new bootstrap.Modal(document.getElementById('deleteModal')).show();
            }

            async confirmDelete() {
                if (!this.currentEditingStore) return;
                
                try {
                    const response = await fetch(`/api/company-shopify-stores/${this.currentEditingStore.uuid}`, {
                        method: 'DELETE'
                    });
                    
                    const data = await response.json();
                    
                    if (data.success) {
                        this.showAlert('Store deleted successfully!', 'success');
                        bootstrap.Modal.getInstance(document.getElementById('deleteModal')).hide();
                        await this.loadStores();
                    } else {
                        this.showAlert('Failed to delete store', 'danger');
                    }
                } catch (error) {
                    console.error('Delete store error:', error);
                    this.showAlert('Failed to delete store', 'danger');
                }
            }

            resetModal() {
                this.currentEditingStore = null;
                document.getElementById('storeForm').reset();
                document.getElementById('storeUuid').value = '';
                document.getElementById('addStoreModalLabel').innerHTML = 
                    '<i class="bi bi-shop me-2"></i>Add Shopify Store';
                this.hideConnectionResults();
            }

            showConnectionResults(success, data = null, error = null) {
                const resultsDiv = document.getElementById('connectionResults');
                const successDiv = document.getElementById('connectionSuccess');
                const errorDiv = document.getElementById('connectionError');
                
                resultsDiv.style.display = 'block';
                resultsDiv.className = `alert ${success ? 'alert-success' : 'alert-danger'}`;
                
                if (success) {
                    successDiv.style.display = 'block';
                    errorDiv.style.display = 'none';
                    
                    document.getElementById('resultShopName').textContent = data.shopName || '-';
                    document.getElementById('resultProductCount').textContent = data.productCount || 0;
                } else {
                    successDiv.style.display = 'none';
                    errorDiv.style.display = 'block';
                    
                    document.getElementById('errorMessage').textContent = error || 'Unknown error';
                }
            }

            hideConnectionResults() {
                document.getElementById('connectionResults').style.display = 'none';
            }

            setButtonLoading(button, loading) {
                const spinner = button.querySelector('.loading-spinner');
                if (loading) {
                    button.disabled = true;
                    spinner.style.display = 'inline-block';
                } else {
                    button.disabled = false;
                    spinner.style.display = 'none';
                }
            }

            showAlert(message, type = 'info') {
                // Remove existing alerts
                document.querySelectorAll('.alert-floating').forEach(alert => alert.remove());
                
                const alertDiv = document.createElement('div');
                alertDiv.className = `alert alert-${type} alert-dismissible fade show alert-floating`;
                alertDiv.innerHTML = `
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                `;
                
                document.body.appendChild(alertDiv);
                
                // Auto-dismiss after 5 seconds
                setTimeout(() => {
                    if (alertDiv.parentNode) {
                        alertDiv.remove();
                    }
                }, 5000);
            }

            escapeHtml(text) {
                const div = document.createElement('div');
                div.textContent = text;
                return div.innerHTML;
            }
        }

        // Initialize when DOM is loaded
        document.addEventListener('DOMContentLoaded', () => {
            new CompanyProfileManager();
        });
    </script>
</body>
</html>