<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
    <style>
        body {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        }

        .progress-container {
            background: white;
            border-radius: 20px;
            padding: 3rem;
            max-width: 600px;
            width: 90%;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            text-align: center;
        }

        .progress-icon {
            font-size: 4rem;
            color: #667eea;
            animation: spin 2s linear infinite;
            margin-bottom: 2rem;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .progress-title {
            font-size: 2rem;
            font-weight: 700;
            color: #2c3e50;
            margin-bottom: 1rem;
        }

        .progress-subtitle {
            color: #6c757d;
            margin-bottom: 2rem;
            font-size: 1.1rem;
        }

        .progress-bar-container {
            background: #f8f9fa;
            border-radius: 10px;
            height: 10px;
            margin-bottom: 2rem;
            overflow: hidden;
        }

        .progress-bar-fill {
            background: linear-gradient(90deg, #667eea, #764ba2);
            height: 100%;
            width: 0%;
            transition: width 0.3s ease;
            border-radius: 10px;
        }

        .step-list {
            text-align: left;
            margin-top: 2rem;
        }

        .step-item {
            display: flex;
            align-items: center;
            padding: 0.75rem 0;
            border-bottom: 1px solid #e9ecef;
        }

        .step-item:last-child {
            border-bottom: none;
        }

        .step-icon {
            margin-right: 1rem;
            width: 24px;
            text-align: center;
        }

        .step-icon.completed {
            color: #28a745;
        }

        .step-icon.active {
            color: #667eea;
            animation: pulse 1.5s infinite;
        }

        .step-icon.pending {
            color: #6c757d;
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        .step-text {
            flex: 1;
            font-weight: 500;
        }

        .step-text.completed {
            color: #28a745;
        }

        .step-text.active {
            color: #2c3e50;
            font-weight: 600;
        }

        .step-text.pending {
            color: #6c757d;
        }

        #progress-messages {
            background: #f8f9fa;
            border-radius: 10px;
            padding: 1rem;
            margin-top: 2rem;
            min-height: 60px;
            font-size: 0.95rem;
            color: #495057;
            display: flex;
            align-items: center;
            justify-content: center;
        }
    </style>
</head>
<body>
    <div class="progress-container">
        <div class="progress-icon">
            <i class="bi bi-gear-fill"></i>
        </div>
        
        <h1 class="progress-title">Creating Your Store</h1>
        <p class="progress-subtitle">
            We're setting up your store with complete automation. This usually takes 1-2 minutes.
        </p>

        <div class="progress-bar-container">
            <div class="progress-bar-fill" id="progressBar"></div>
        </div>

        <div class="step-list">
            <% pipelineSteps.forEach((step, index) => { %>
                <div class="step-item" id="step-<%= index %>">
                    <div class="step-icon pending">
                        <i class="bi bi-circle"></i>
                    </div>
                    <div class="step-text pending"><%= step %></div>
                </div>
            <% }); %>
        </div>

        <div id="progress-messages">
            Connecting to deployment system...
        </div>
    </div>

    <script>
        // Connect to deployment progress updates
        const deploymentId = '<%= deploymentId %>';
        const successRedirect = <%= successRedirect || false %>;
        
        // Simulate progress for immediate feedback
        let currentStep = 0;
        let progressPercent = 0;
        
        function updateProgress(step, message, percent) {
            // Update progress bar
            document.getElementById('progressBar').style.width = percent + '%';
            
            // Update step status
            const steps = document.querySelectorAll('.step-item');
            steps.forEach((stepEl, index) => {
                const icon = stepEl.querySelector('.step-icon');
                const text = stepEl.querySelector('.step-text');
                
                if (index < step) {
                    // Completed
                    icon.innerHTML = '<i class="bi bi-check-circle-fill"></i>';
                    icon.className = 'step-icon completed';
                    text.className = 'step-text completed';
                } else if (index === step) {
                    // Active
                    icon.innerHTML = '<i class="bi bi-arrow-right-circle-fill"></i>';
                    icon.className = 'step-icon active';
                    text.className = 'step-text active';
                } else {
                    // Pending
                    icon.innerHTML = '<i class="bi bi-circle"></i>';
                    icon.className = 'step-icon pending';
                    text.className = 'step-text pending';
                }
            });
            
            // Update message
            document.getElementById('progress-messages').textContent = message;
        }
        
        // Try to connect to real-time updates
        const eventSource = new EventSource(`/admin/site-setup/progress/${deploymentId}`);
        
        eventSource.onmessage = function(event) {
            try {
                const data = JSON.parse(event.data);
                console.log('Progress update:', data);
                
                if (data.type === 'complete' && data.store) {
                    // Deployment completed - redirect to success page
                    updateProgress(6, 'Deployment completed! Redirecting to your store...', 100);
                    
                    setTimeout(() => {
                        window.location.href = `/admin/site-setup?step=5&store=${data.store.uuid}&success=true&deployed=true&automated=true`;
                    }, 2000);
                } else if (data.type === 'error') {
                    // Handle errors
                    document.getElementById('progress-messages').innerHTML = 
                        `<span class="text-danger"><i class="bi bi-exclamation-triangle me-2"></i>${data.message}</span>`;
                } else if (data.progress !== undefined) {
                    // Regular progress update
                    const stepIndex = Math.floor(data.progress / (100 / 7));
                    updateProgress(stepIndex, data.message || 'Processing...', data.progress);
                }
            } catch (error) {
                console.error('Error parsing progress data:', error);
            }
        };
        
        eventSource.onerror = function(error) {
            console.error('EventSource failed:', error);
            // Fall back to polling or show error
            eventSource.close();
            
            // Show fallback message and redirect after timeout
            setTimeout(() => {
                updateProgress(6, 'Store creation completed! Redirecting...', 100);
                setTimeout(() => {
                    window.location.href = '/admin';
                }, 3000);
            }, 10000);
        };
        
        // Fallback progress simulation
        setTimeout(() => {
            if (progressPercent < 20) {
                updateProgress(0, 'Initializing deployment...', 10);
                setTimeout(() => updateProgress(1, 'Creating database entries...', 25), 2000);
                setTimeout(() => updateProgress(2, 'Generating store files...', 45), 4000);
                setTimeout(() => updateProgress(3, 'Setting up Git repository...', 65), 6000);
                setTimeout(() => updateProgress(4, 'Deploying to Vercel...', 85), 8000);
                setTimeout(() => updateProgress(5, 'Configuring domain...', 95), 10000);
                setTimeout(() => {
                    updateProgress(6, 'Deployment completed!', 100);
                    setTimeout(() => {
                        window.location.href = '/admin';
                    }, 2000);
                }, 12000);
            }
        }, 1000);
    </script>
</body>
</html>