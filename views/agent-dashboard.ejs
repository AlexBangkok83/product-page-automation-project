<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Agent Automation Dashboard</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .dashboard-container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 30px;
            margin-bottom: 20px;
            text-align: center;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            background: linear-gradient(135deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .header p {
            font-size: 1.2rem;
            color: #666;
            margin-bottom: 20px;
        }

        .status-badge {
            display: inline-block;
            padding: 8px 16px;
            background: #4CAF50;
            color: white;
            border-radius: 20px;
            font-weight: bold;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.7; }
            100% { opacity: 1; }
        }

        .metrics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .metric-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease;
        }

        .metric-card:hover {
            transform: translateY(-5px);
        }

        .metric-card h3 {
            color: #667eea;
            margin-bottom: 15px;
            font-size: 1.3rem;
        }

        .metric-number {
            font-size: 2.5rem;
            font-weight: bold;
            color: #333;
            margin-bottom: 10px;
        }

        .metric-label {
            color: #666;
            font-size: 0.9rem;
        }

        .active-agents-section {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 30px;
            margin-bottom: 20px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

        .section-title {
            font-size: 1.8rem;
            color: #667eea;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .agent-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 20px;
        }

        .agent-card {
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            border-radius: 12px;
            padding: 20px;
            border-left: 5px solid #667eea;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .agent-card:hover {
            transform: translateX(5px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .agent-card::before {
            content: '';
            position: absolute;
            top: 0;
            right: 0;
            width: 40px;
            height: 40px;
            background: rgba(102, 126, 234, 0.1);
            border-radius: 50%;
            animation: agentPulse 3s infinite;
        }

        @keyframes agentPulse {
            0% { transform: scale(0.8); opacity: 0.5; }
            50% { transform: scale(1.2); opacity: 0.2; }
            100% { transform: scale(0.8); opacity: 0.5; }
        }

        .agent-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .agent-name {
            font-weight: bold;
            font-size: 1.2rem;
            color: #333;
        }

        .agent-department {
            background: #667eea;
            color: white;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 0.8rem;
        }

        .agent-task {
            color: #555;
            margin-bottom: 15px;
            font-style: italic;
        }

        .agent-progress {
            margin-bottom: 15px;
        }

        .progress-bar {
            background: #e0e0e0;
            border-radius: 10px;
            height: 8px;
            overflow: hidden;
            margin-bottom: 5px;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #667eea, #764ba2);
            border-radius: 10px;
            transition: width 0.5s ease;
        }

        .progress-text {
            font-size: 0.9rem;
            color: #666;
        }

        .agent-status {
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 0.9rem;
        }

        .status-active {
            color: #4CAF50;
            font-weight: bold;
        }

        .status-completed {
            color: #2196F3;
            font-weight: bold;
        }

        .coordination-section {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 30px;
            margin-bottom: 20px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

        .coordination-matrix {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 15px;
        }

        .coordination-card {
            background: linear-gradient(135deg, #ffeaa7 0%, #fab1a0 100%);
            border-radius: 10px;
            padding: 15px;
            text-align: center;
        }

        .coordination-card h4 {
            color: #333;
            margin-bottom: 10px;
        }

        .coordination-partners {
            font-size: 0.9rem;
            color: #555;
        }

        .no-agents {
            text-align: center;
            padding: 40px;
            color: #666;
            font-style: italic;
        }

        .refresh-button {
            position: fixed;
            bottom: 30px;
            right: 30px;
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 15px 25px;
            border-radius: 50px;
            font-size: 1rem;
            cursor: pointer;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            transition: all 0.3s ease;
        }

        .refresh-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.4);
        }

        .auto-refresh {
            text-align: center;
            margin-top: 20px;
            color: #666;
            font-size: 0.9rem;
        }

        .department-engineering { border-left-color: #e74c3c; }
        .department-design { border-left-color: #9b59b6; }
        .department-marketing { border-left-color: #f39c12; }
        .department-product { border-left-color: #27ae60; }
        .department-testing { border-left-color: #3498db; }
        .department-studio-operations { border-left-color: #34495e; }
        .department-project-management { border-left-color: #e67e22; }

        .task-queue-section {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 30px;
            margin-bottom: 20px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

        .task-queue-item {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 10px;
            border-left: 4px solid #667eea;
        }

        .task-queue-item h4 {
            color: #333;
            margin-bottom: 5px;
        }

        .task-queue-item p {
            color: #666;
            font-size: 0.9rem;
        }
    </style>
</head>
<body>
    <div class="dashboard-container">
        <!-- Header -->
        <div class="header">
            <h1>ü§ñ Agent Automation Dashboard</h1>
            <p>Expert agents automatically deployed for all technical tasks</p>
            <span class="status-badge">SYSTEM ACTIVE</span>
        </div>

        <!-- Metrics Grid -->
        <div class="metrics-grid">
            <div class="metric-card">
                <h3>ü§ñ Active Agents</h3>
                <div class="metric-number" id="activeAgentCount">0</div>
                <div class="metric-label">Currently working</div>
            </div>
            
            <div class="metric-card">
                <h3>üìã Tasks in Progress</h3>
                <div class="metric-number" id="activeTaskCount">0</div>
                <div class="metric-label">Being handled</div>
            </div>
            
            <div class="metric-card">
                <h3>‚ö° Completion Rate</h3>
                <div class="metric-number" id="completionRate">0%</div>
                <div class="metric-label">Success rate</div>
            </div>
            
            <div class="metric-card">
                <h3>üè¢ Departments Active</h3>
                <div class="metric-number" id="activeDepartments">0</div>
                <div class="metric-label">Involved in work</div>
            </div>
        </div>

        <!-- Active Agents Section -->
        <div class="active-agents-section">
            <h2 class="section-title">
                <span>üöÄ</span>
                Active Agent Roster
            </h2>
            <div class="agent-grid" id="agentGrid">
                <!-- Agents will be populated here -->
            </div>
            <div class="no-agents" id="noAgents" style="display: none;">
                <h3>üèÉ Ready to Deploy</h3>
                <p>No agents currently active - system is monitoring for new tasks and will auto-deploy experts immediately when needed.</p>
            </div>
        </div>

        <!-- Coordination Matrix -->
        <div class="coordination-section">
            <h2 class="section-title">
                <span>ü§ù</span>
                Agent Coordination Matrix
            </h2>
            <div class="coordination-matrix" id="coordinationMatrix">
                <!-- Coordination info will be populated here -->
            </div>
        </div>

        <!-- Task Queue -->
        <div class="task-queue-section">
            <h2 class="section-title">
                <span>üì•</span>
                Task Detection Queue
            </h2>
            <div id="taskQueue">
                <!-- Task queue will be populated here -->
            </div>
        </div>

        <!-- Auto-refresh indicator -->
        <div class="auto-refresh">
            <p>üîÑ Dashboard auto-refreshes every 5 seconds | Last update: <span id="lastUpdate">-</span></p>
        </div>
    </div>

    <!-- Refresh Button -->
    <button class="refresh-button" onclick="refreshDashboard()">
        üîÑ Refresh Now
    </button>

    <script>
        // Dashboard state
        let dashboardData = {
            activeAgents: [],
            tasks: [],
            metrics: {},
            coordination: []
        };

        // Initialize dashboard
        document.addEventListener('DOMContentLoaded', function() {
            refreshDashboard();
            
            // Auto-refresh every 5 seconds
            setInterval(refreshDashboard, 5000);
        });

        async function refreshDashboard() {
            try {
                // Simulate fetching data from agent system
                // In real implementation, this would call the actual API
                dashboardData = await fetchDashboardData();
                
                updateMetrics();
                updateAgentGrid();
                updateCoordinationMatrix();
                updateTaskQueue();
                updateTimestamp();
                
            } catch (error) {
                console.error('Failed to refresh dashboard:', error);
            }
        }

        async function fetchDashboardData() {
            // Simulate API call - in real implementation, this would fetch from the agent system
            return {
                activeAgents: generateMockAgents(),
                tasks: generateMockTasks(),
                metrics: generateMockMetrics(),
                coordination: generateMockCoordination()
            };
        }

        function generateMockAgents() {
            const agents = [
                {
                    id: 'agent-1',
                    name: 'backend-architect',
                    department: 'engineering',
                    task: 'Designing API endpoints for user authentication system',
                    progress: 75,
                    status: 'active',
                    runtime: 1200,
                    activity: 'implementing JWT token validation'
                },
                {
                    id: 'agent-2',
                    name: 'frontend-developer',
                    department: 'engineering',
                    task: 'Building responsive login and signup forms',
                    progress: 60,
                    status: 'active',
                    runtime: 900,
                    activity: 'styling mobile breakpoints'
                },
                {
                    id: 'agent-3',
                    name: 'ui-designer',
                    department: 'design',
                    task: 'Creating consistent visual design for auth flow',
                    progress: 90,
                    status: 'active',
                    runtime: 1800,
                    activity: 'finalizing color palette'
                },
                {
                    id: 'agent-4',
                    name: 'test-writer-fixer',
                    department: 'testing',
                    task: 'Writing comprehensive tests for authentication',
                    progress: 45,
                    status: 'active',
                    runtime: 600,
                    activity: 'creating integration test cases'
                }
            ];
            
            return Math.random() > 0.3 ? agents : []; // Sometimes show empty state
        }

        function generateMockTasks() {
            return [
                {
                    id: 'task-1',
                    description: 'Implement user authentication system',
                    agents: ['backend-architect', 'frontend-developer', 'ui-designer', 'test-writer-fixer'],
                    status: 'in-progress',
                    priority: 'high'
                },
                {
                    id: 'task-2',
                    description: 'Optimize database query performance',
                    agents: ['backend-architect', 'performance-benchmarker'],
                    status: 'pending',
                    priority: 'medium'
                }
            ];
        }

        function generateMockMetrics() {
            return {
                activeAgents: dashboardData.activeAgents?.length || 0,
                activeTasks: dashboardData.tasks?.length || 0,
                completionRate: Math.floor(Math.random() * 20) + 80, // 80-100%
                activeDepartments: new Set(dashboardData.activeAgents?.map(a => a.department) || []).size
            };
        }

        function generateMockCoordination() {
            return [
                {
                    agent: 'backend-architect',
                    partners: ['frontend-developer', 'test-writer-fixer'],
                    relationship: 'API handoff'
                },
                {
                    agent: 'ui-designer',
                    partners: ['frontend-developer'],
                    relationship: 'Design implementation'
                },
                {
                    agent: 'test-writer-fixer',
                    partners: ['backend-architect', 'frontend-developer'],
                    relationship: 'Testing validation'
                }
            ];
        }

        function updateMetrics() {
            document.getElementById('activeAgentCount').textContent = dashboardData.metrics.activeAgents;
            document.getElementById('activeTaskCount').textContent = dashboardData.metrics.activeTasks;
            document.getElementById('completionRate').textContent = dashboardData.metrics.completionRate + '%';
            document.getElementById('activeDepartments').textContent = dashboardData.metrics.activeDepartments;
        }

        function updateAgentGrid() {
            const agentGrid = document.getElementById('agentGrid');
            const noAgents = document.getElementById('noAgents');
            
            if (!dashboardData.activeAgents || dashboardData.activeAgents.length === 0) {
                agentGrid.style.display = 'none';
                noAgents.style.display = 'block';
                return;
            }
            
            agentGrid.style.display = 'grid';
            noAgents.style.display = 'none';
            
            agentGrid.innerHTML = dashboardData.activeAgents.map(agent => `
                <div class="agent-card department-${agent.department}">
                    <div class="agent-header">
                        <div class="agent-name">${agent.name}</div>
                        <div class="agent-department">${agent.department}</div>
                    </div>
                    <div class="agent-task">${agent.task}</div>
                    <div class="agent-progress">
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: ${agent.progress}%"></div>
                        </div>
                        <div class="progress-text">${agent.progress}% complete</div>
                    </div>
                    <div class="agent-status">
                        <span class="status-${agent.status}">${agent.status.toUpperCase()}</span>
                        <span>${formatRuntime(agent.runtime)}</span>
                    </div>
                    <div style="margin-top: 10px; font-size: 0.8rem; color: #666;">
                        üìç ${agent.activity}
                    </div>
                </div>
            `).join('');
        }

        function updateCoordinationMatrix() {
            const coordinationMatrix = document.getElementById('coordinationMatrix');
            
            if (!dashboardData.coordination || dashboardData.coordination.length === 0) {
                coordinationMatrix.innerHTML = '<div class="no-agents"><p>No active coordination required</p></div>';
                return;
            }
            
            coordinationMatrix.innerHTML = dashboardData.coordination.map(coord => `
                <div class="coordination-card">
                    <h4>${coord.agent}</h4>
                    <div class="coordination-partners">
                        ü§ù Coordinating with:<br>
                        ${coord.partners.join(', ')}
                    </div>
                    <div style="margin-top: 8px; font-size: 0.8rem; font-style: italic;">
                        ${coord.relationship}
                    </div>
                </div>
            `).join('');
        }

        function updateTaskQueue() {
            const taskQueue = document.getElementById('taskQueue');
            
            if (!dashboardData.tasks || dashboardData.tasks.length === 0) {
                taskQueue.innerHTML = '<div class="no-agents"><p>No tasks in queue - system monitoring for new work</p></div>';
                return;
            }
            
            taskQueue.innerHTML = dashboardData.tasks.map(task => `
                <div class="task-queue-item">
                    <h4>${task.description}</h4>
                    <p>üìä Status: ${task.status} | üéØ Priority: ${task.priority}</p>
                    <p>ü§ñ Agents: ${task.agents.join(', ')}</p>
                </div>
            `).join('');
        }

        function updateTimestamp() {
            document.getElementById('lastUpdate').textContent = new Date().toLocaleTimeString();
        }

        function formatRuntime(seconds) {
            const hours = Math.floor(seconds / 3600);
            const minutes = Math.floor((seconds % 3600) / 60);
            const secs = seconds % 60;
            
            if (hours > 0) {
                return `${hours}h ${minutes}m`;
            } else if (minutes > 0) {
                return `${minutes}m ${secs}s`;
            } else {
                return `${secs}s`;
            }
        }

        // Add some visual flair
        function addVisualEffects() {
            // Add floating animation to agent cards
            const agentCards = document.querySelectorAll('.agent-card');
            agentCards.forEach((card, index) => {
                card.style.animationDelay = `${index * 0.1}s`;
                card.style.animation = 'float 3s ease-in-out infinite';
            });
        }

        // Add CSS for floating animation
        const style = document.createElement('style');
        style.textContent = `
            @keyframes float {
                0%, 100% { transform: translateY(0px); }
                50% { transform: translateY(-5px); }
            }
        `;
        document.head.appendChild(style);

        // Show a notification when new agents are deployed
        function showAgentDeploymentNotification(agentName) {
            const notification = document.createElement('div');
            notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                background: linear-gradient(135deg, #667eea, #764ba2);
                color: white;
                padding: 15px 20px;
                border-radius: 10px;
                box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
                z-index: 1000;
                animation: slideIn 0.5s ease;
            `;
            notification.textContent = `üöÄ ${agentName} deployed!`;
            
            document.body.appendChild(notification);
            
            setTimeout(() => {
                notification.remove();
            }, 3000);
        }

        // Add slide-in animation
        const notificationStyle = document.createElement('style');
        notificationStyle.textContent = `
            @keyframes slideIn {
                from { transform: translateX(100%); opacity: 0; }
                to { transform: translateX(0); opacity: 1; }
            }
        `;
        document.head.appendChild(notificationStyle);
    </script>
</body>
</html>