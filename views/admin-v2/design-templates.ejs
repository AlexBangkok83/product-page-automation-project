<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Product Templates - MultiStore Platform</title>
    
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    
    <!-- Lucide Icons -->
    <script src="https://unpkg.com/lucide@latest/dist/umd/lucide.js"></script>
    
    <style>
        ::-webkit-scrollbar {
            width: 6px;
        }
        ::-webkit-scrollbar-track {
            background: #f1f5f9;
        }
        ::-webkit-scrollbar-thumb {
            background: #cbd5e1;
            border-radius: 3px;
        }
        ::-webkit-scrollbar-thumb:hover {
            background: #94a3b8;
        }
    </style>
</head>
<body class="bg-gray-50">
    <div class="flex h-screen">
        <!-- Sidebar -->
        <div class="w-64 bg-white border-r border-gray-200 flex flex-col">
            <!-- Logo/Brand -->
            <div class="px-6 py-4 border-b border-gray-200">
                <div class="flex items-center">
                    <i data-lucide="store" class="w-8 h-8 text-blue-600"></i>
                    <span class="ml-2 text-lg font-semibold text-gray-900">MultiStore</span>
                </div>
            </div>
            
            <!-- Navigation -->
            <nav class="flex-1 px-4 py-6 space-y-1">
                <!-- Dashboard -->
                <a href="/admin-v2" class="flex items-center px-3 py-2 text-sm font-medium text-gray-700 hover:text-gray-900 hover:bg-gray-50 rounded-lg">
                    <i data-lucide="layout-dashboard" class="w-5 h-5 mr-3"></i>
                    Dashboard
                </a>
                
                <!-- Companies -->
                <div class="pt-4">
                    <div class="flex items-center px-3 py-2 text-xs font-semibold text-gray-500 uppercase tracking-wider">
                        Companies
                    </div>
                    <div class="mt-2 space-y-1 ml-3">
                        <a href="/admin-v2" class="flex items-center px-3 py-2 text-sm font-medium text-gray-700 hover:text-gray-900 hover:bg-gray-50 rounded-lg">
                            <i data-lucide="building-2" class="w-4 h-4 mr-3"></i>
                            Nextsite
                        </a>
                    </div>
                </div>
                
                <!-- Nextsite expanded -->
                <div class="ml-6 space-y-1">
                    <a href="/admin-v2/company/settings" class="flex items-center px-3 py-2 text-sm font-medium text-gray-600 hover:text-gray-900 hover:bg-gray-50 rounded-lg">
                        <i data-lucide="settings" class="w-4 h-4 mr-3"></i>
                        Company Settings
                    </a>
                    <!-- Design Library with submenu -->
                    <div class="design-menu">
                        <button onclick="toggleDesignMenu()" class="w-full flex items-center justify-between px-3 py-2 text-sm font-medium text-indigo-600 bg-indigo-50 rounded-lg">
                            <div class="flex items-center">
                                <i data-lucide="palette" class="w-4 h-4 mr-3"></i>
                                Design Library
                            </div>
                            <i data-lucide="chevron-down" class="w-4 h-4 design-chevron transition-transform" id="design-chevron"></i>
                        </button>
                        <div class="design-submenu ml-6 mt-1 space-y-1" id="design-submenu">
                            <a href="/admin-v2/company/design/templates" class="flex items-center px-3 py-2 text-sm font-medium text-indigo-600 bg-indigo-50 rounded-lg">
                                <i data-lucide="layout-template" class="w-3 h-3 mr-2"></i>
                                Product Templates
                            </a>
                            <a href="/admin-v2/company/design/themes" class="flex items-center px-3 py-2 text-sm font-medium text-gray-600 hover:text-gray-900 hover:bg-gray-50 rounded-lg">
                                <i data-lucide="brush" class="w-3 h-3 mr-2"></i>
                                Themes & Styling
                            </a>
                        </div>
                    </div>
                    <div class="pt-2">
                        <div class="flex items-center px-3 py-1 text-xs font-medium text-gray-500">
                            Shopify Connections
                        </div>
                        <div class="ml-3 mt-1 space-y-1">
                            <a href="/admin-v2/shopify/ecominter" class="flex items-center px-3 py-2 text-sm font-medium text-gray-600 hover:text-gray-900 hover:bg-gray-50 rounded-lg">
                                <i data-lucide="shopping-bag" class="w-4 h-4 mr-3"></i>
                                ecominter.myshopify.com
                            </a>
                            <div class="ml-6 space-y-1">
                                <!-- Dynamic stores under this connection -->
                                <% if (typeof stores !== 'undefined' && stores && stores.length > 0) { %>
                                    <% const ecominterStores = stores.filter(store => store.shopify_domain === 'ecominter.myshopify.com'); %>
                                    <% ecominterStores.forEach(store => { %>
                                        <% if (store.status === 'active' || store.status === 'setup') { %>
                                            <a href="/admin-v2/store/<%= store.uuid %>" class="flex items-center px-3 py-2 text-sm font-medium text-gray-700 hover:text-gray-900 hover:bg-gray-50 rounded-lg">
                                                <i data-lucide="globe" class="w-3 h-3 mr-3"></i>
                                                <%= store.domain %>
                                            </a>
                                        <% } else if (store.status === 'draft') { %>
                                            <a href="/admin-v2/store/<%= store.uuid %>/setup" class="flex items-center px-3 py-2 text-sm font-medium text-gray-400 hover:text-gray-600 hover:bg-gray-50 rounded-lg">
                                                <i data-lucide="file-text" class="w-3 h-3 mr-3"></i>
                                                <span class="opacity-60"><%= store.domain %></span>
                                                <span class="ml-1 text-xs text-red-500">(draft)</span>
                                            </a>
                                        <% } %>
                                    <% }); %>
                                <% } else { %>
                                    <!-- Fallback if no dynamic data -->
                                    <a href="/admin-v2/store/882eacac-d9fa-411c-a9f8-7415c26240b9" class="flex items-center px-3 py-2 text-sm font-medium text-gray-500 hover:text-gray-700 hover:bg-gray-50 rounded-lg">
                                        <i data-lucide="globe" class="w-3 h-3 mr-3"></i>
                                        clipia.de
                                    </a>
                                <% } %>
                            </div>
                        </div>
                    </div>
                </div>
            </nav>
            
            <!-- Bottom section -->
            <div class="px-4 py-4 border-t border-gray-200">
                <div class="flex items-center">
                    <div class="w-8 h-8 bg-gray-200 rounded-full flex items-center justify-center">
                        <i data-lucide="user" class="w-4 h-4 text-gray-600"></i>
                    </div>
                    <div class="ml-3">
                        <div class="text-sm font-medium text-gray-900">Admin</div>
                        <div class="text-xs text-gray-500">admin@company.com</div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Main Content -->
        <main class="flex-1 overflow-y-auto">
            <!-- Page Header -->
            <div class="bg-white border-b border-gray-200 px-6 py-4">
                <div class="flex items-center justify-between">
                    <div>
                        <!-- Breadcrumb -->
                        <nav class="flex text-sm text-gray-500 mb-2">
                            <a href="/admin-v2" class="hover:text-gray-700">Dashboard</a>
                            <span class="mx-2">></span>
                            <a href="/admin-v2/company/design" class="hover:text-gray-700">Design Library</a>
                            <span class="mx-2">></span>
                            <span class="text-gray-900">Product Templates</span>
                        </nav>
                        
                        <h1 class="text-2xl font-bold text-gray-900">Product Templates</h1>
                        <p class="text-gray-600 mt-1">Create and manage product page templates for your store</p>
                    </div>
                    
                    <div>
                        <button type="button" onclick="openTemplateBuilder()" class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center">
                            <i data-lucide="plus" class="w-4 h-4 mr-2"></i>
                            Create Template
                        </button>
                    </div>
                </div>
            </div>

            <!-- Tab Navigation -->
            <div class="bg-white border-b border-gray-200">
                <div class="px-6">
                    <nav class="flex space-x-8">
                        <a href="/admin-v2/company/design" class="border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm flex items-center">
                            <i data-lucide="layout-dashboard" class="w-4 h-4 mr-2"></i>
                            Overview
                        </a>
                        <a href="/admin-v2/company/design/templates" class="border-blue-500 text-blue-600 whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm flex items-center">
                            <i data-lucide="layout-template" class="w-4 h-4 mr-2"></i>
                            Product Templates
                        </a>
                        <a href="/admin-v2/company/design/themes" class="border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm flex items-center">
                            <i data-lucide="brush" class="w-4 h-4 mr-2"></i>
                            Themes & Styling
                        </a>
                    </nav>
                </div>
            </div>

            <!-- Content Area -->
            <div class="p-6">
                <!-- Filter Controls -->
                <div class="bg-white shadow rounded-lg p-6 mb-6">
                    <div class="flex items-center justify-between mb-4">
                        <h2 class="text-lg font-medium text-gray-900">Your Templates</h2>
                        <div class="flex space-x-3">
                            <select id="filterStatus" class="border-gray-300 rounded-md shadow-sm focus:border-blue-500 focus:ring-blue-500" onchange="filterTemplates()">
                                <option value="all">All Templates</option>
                                <option value="active">Active</option>
                                <option value="assigned">Assigned</option>
                                <option value="unassigned">Unassigned</option>
                            </select>
                            <input type="text" id="searchTemplates" placeholder="Search templates..." class="border-gray-300 rounded-md shadow-sm focus:border-blue-500 focus:ring-blue-500" oninput="searchTemplates()">
                        </div>
                    </div>
                    
                    <div id="templates-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                        <div class="text-center py-12 col-span-full">
                            <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
                            <p class="text-gray-500">Loading templates...</p>
                        </div>
                    </div>
                </div>

                <!-- Template Assignment Section -->
                <div class="bg-white shadow rounded-lg p-6">
                    <div class="flex items-center justify-between mb-4">
                        <h2 class="text-lg font-medium text-gray-900">Template Assignments</h2>
                        <button type="button" onclick="openAssignmentManager()" class="bg-gray-100 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-200 transition-colors flex items-center">
                            <i data-lucide="link" class="w-4 h-4 mr-2"></i>
                            Manage Assignments
                        </button>
                    </div>

                    <div id="assignments-list">
                        <div class="text-center py-12">
                            <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
                            <p class="text-gray-500">Loading assignments...</p>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <!-- Template Assignment Modal -->
    <div id="assignment-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden">
        <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
            <div class="mt-3">
                <div class="flex items-center justify-between mb-4">
                    <h3 class="text-lg font-medium text-gray-900">Manage Template Assignments</h3>
                    <button onclick="closeAssignmentModal()" class="text-gray-400 hover:text-gray-600">
                        <i data-lucide="x" class="w-5 h-5"></i>
                    </button>
                </div>
                <div class="space-y-4">
                    <div>
                        <label for="product-handle" class="block text-sm font-medium text-gray-700 mb-1">Product Handle</label>
                        <input type="text" id="product-handle" class="w-full border-gray-300 rounded-md shadow-sm focus:border-blue-500 focus:ring-blue-500" placeholder="Enter product handle">
                        <p class="text-xs text-gray-500 mt-1">Product handle from your store (e.g. "cool-sunglasses")</p>
                    </div>
                    
                    <div>
                        <label for="template-select" class="block text-sm font-medium text-gray-700 mb-1">Template</label>
                        <select id="template-select" class="w-full border-gray-300 rounded-md shadow-sm focus:border-blue-500 focus:ring-blue-500">
                            <option value="">Select a template...</option>
                        </select>
                    </div>
                </div>
                
                <div class="mt-6">
                    <h4 class="text-sm font-medium text-gray-900 mb-3">Current Assignments</h4>
                    <div id="assignments-table" class="border border-gray-200 rounded-md max-h-40 overflow-y-auto">
                        <!-- Dynamic assignments will be loaded here -->
                    </div>
                </div>
                
                <div class="flex justify-end space-x-3 mt-6">
                    <button onclick="closeAssignmentModal()" class="px-4 py-2 bg-gray-300 text-gray-700 rounded-md hover:bg-gray-400">
                        Cancel
                    </button>
                    <button onclick="saveAssignment()" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">
                        Save Assignment
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Initialize Lucide icons
        lucide.createIcons();
        
        // Design menu toggle functionality
        function toggleDesignMenu() {
            const submenu = document.getElementById('design-submenu');
            const chevron = document.getElementById('design-chevron');
            
            if (submenu.style.display === 'none') {
                submenu.style.display = 'block';
                chevron.style.transform = 'rotate(180deg)';
            } else {
                submenu.style.display = 'none';
                chevron.style.transform = 'rotate(0deg)';
            }
        }
        
        // Keep design menu open since we're on a design page
        document.addEventListener('DOMContentLoaded', function() {
            const submenu = document.getElementById('design-submenu');
            const chevron = document.getElementById('design-chevron');
            submenu.style.display = 'block';
            chevron.style.transform = 'rotate(180deg)';
        });
        
        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            loadTemplates();
            loadAssignments();
        });

        // Load templates
        async function loadTemplates() {
            try {
                const response = await fetch('/admin-v2/api/product-templates');
                const data = await response.json();
                
                if (data.success) {
                    displayTemplates(data.templates);
                    populateTemplateDropdown(data.templates);
                } else {
                    showError('Failed to load templates');
                }
            } catch (error) {
                console.error('Error loading templates:', error);
                showError('Error loading templates');
            }
        }

        // Display templates in grid
        function displayTemplates(templates) {
            const grid = document.getElementById('templates-grid');
            
            if (templates.length === 0) {
                grid.innerHTML = `
                    <div class="text-center py-12 col-span-full">
                        <div class="w-16 h-16 mx-auto mb-4 text-gray-400">
                            <i data-lucide="layout" class="w-16 h-16"></i>
                        </div>
                        <h3 class="text-lg font-medium text-gray-900 mb-2">No templates yet</h3>
                        <p class="text-gray-500 mb-6">Create your first product page template to get started</p>
                        <button onclick="openTemplateBuilder()" class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700">Create Template</button>
                    </div>
                `;
                return;
            }

            grid.innerHTML = templates.map(template => `
                <div class="bg-white border border-gray-200 rounded-lg overflow-hidden shadow-sm hover:shadow-md transition-shadow" data-template-id="${template.id}">
                    <div class="h-32 bg-gray-50 flex items-center justify-center">
                        <div class="w-16 h-16 bg-gray-200 rounded-md flex items-center justify-center">
                            <i data-lucide="layout" class="w-8 h-8 text-gray-400"></i>
                        </div>
                    </div>
                    
                    <div class="p-4">
                        <h3 class="font-medium text-gray-900 mb-1">${template.name}</h3>
                        <p class="text-sm text-gray-500 mb-3">${template.description || 'No description'}</p>
                        
                        <div class="flex items-center justify-between text-xs text-gray-500 mb-4">
                            <span>${template.sections_count} sections</span>
                            <span>${formatDate(template.created_at)}</span>
                        </div>
                        
                        <div class="flex space-x-2">
                            <button onclick="editTemplate(${template.id})" class="flex-1 bg-gray-100 text-gray-700 px-3 py-2 rounded text-sm hover:bg-gray-200">
                                <i data-lucide="edit" class="w-3 h-3 inline mr-1"></i>Edit
                            </button>
                            <button onclick="previewTemplate(${template.id})" class="flex-1 bg-blue-100 text-blue-700 px-3 py-2 rounded text-sm hover:bg-blue-200">
                                <i data-lucide="eye" class="w-3 h-3 inline mr-1"></i>Preview
                            </button>
                            <button onclick="deleteTemplate(${template.id})" class="bg-red-100 text-red-700 px-3 py-2 rounded text-sm hover:bg-red-200">
                                <i data-lucide="trash-2" class="w-3 h-3"></i>
                            </button>
                        </div>
                    </div>
                </div>
            `).join('');
            
            // Re-initialize icons for the new content
            lucide.createIcons();
        }

        // Load assignments
        async function loadAssignments() {
            try {
                const response = await fetch('/admin-v2/api/template-assignments');
                const data = await response.json();
                
                if (data.success) {
                    displayAssignments(data.assignments);
                } else {
                    showError('Failed to load assignments');
                }
            } catch (error) {
                console.error('Error loading assignments:', error);
                showError('Error loading assignments');
            }
        }

        // Display assignments
        function displayAssignments(assignments) {
            const container = document.getElementById('assignments-list');
            
            if (assignments.length === 0) {
                container.innerHTML = `
                    <div class="text-center py-12">
                        <div class="w-16 h-16 mx-auto mb-4 text-gray-400">
                            <i data-lucide="link" class="w-16 h-16"></i>
                        </div>
                        <h3 class="text-lg font-medium text-gray-900 mb-2">No assignments yet</h3>
                        <p class="text-gray-500 mb-6">Assign templates to products to customize their pages</p>
                        <button onclick="openAssignmentManager()" class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700">Create Assignment</button>
                    </div>
                `;
                return;
            }

            container.innerHTML = `
                <div class="space-y-3">
                    ${assignments.map(assignment => `
                        <div class="flex items-center justify-between p-4 border border-gray-200 rounded-lg">
                            <div>
                                <h4 class="font-medium text-gray-900">${assignment.product_handle}</h4>
                                <p class="text-sm text-gray-500">Template: ${getTemplateName(assignment.template_id)}</p>
                                <span class="text-xs text-gray-400">${formatDate(assignment.created_at)}</span>
                            </div>
                            <button onclick="removeAssignment(${assignment.id})" class="text-red-600 hover:text-red-800">
                                <i data-lucide="trash-2" class="w-4 h-4"></i>
                            </button>
                        </div>
                    `).join('')}
                </div>
            `;
            
            // Re-initialize icons
            lucide.createIcons();
        }

        // Template actions
        function openTemplateBuilder() {
            window.location.href = '/admin-v2/templates/builder';
        }

        function editTemplate(templateId) {
            window.location.href = `/admin-v2/templates/builder?edit=${templateId}`;
        }

        function previewTemplate(templateId) {
            window.open(`/admin-v2/templates/preview/${templateId}`, '_blank');
        }

        async function deleteTemplate(templateId) {
            if (!confirm('Are you sure you want to delete this template?')) {
                return;
            }

            try {
                const response = await fetch(`/admin-v2/api/product-templates/${templateId}`, {
                    method: 'DELETE'
                });
                const data = await response.json();

                if (data.success) {
                    showSuccess('Template deleted successfully');
                    loadTemplates();
                    loadAssignments();
                } else {
                    showError(data.error || 'Failed to delete template');
                }
            } catch (error) {
                console.error('Error deleting template:', error);
                showError('Error deleting template');
            }
        }

        // Assignment management
        function openAssignmentManager() {
            document.getElementById('assignment-modal').classList.remove('hidden');
            loadAssignmentsInModal();
        }

        function closeAssignmentModal() {
            document.getElementById('assignment-modal').classList.add('hidden');
        }

        async function loadAssignmentsInModal() {
            try {
                const response = await fetch('/admin-v2/api/template-assignments');
                const data = await response.json();
                
                if (data.success) {
                    displayModalAssignments(data.assignments);
                }
            } catch (error) {
                console.error('Error loading modal assignments:', error);
            }
        }

        function displayModalAssignments(assignments) {
            const container = document.getElementById('assignments-table');
            
            if (assignments.length === 0) {
                container.innerHTML = '<p class="text-gray-500 text-sm p-4">No assignments yet</p>';
                return;
            }

            container.innerHTML = `
                <div class="divide-y divide-gray-200">
                    ${assignments.map(assignment => `
                        <div class="flex items-center justify-between p-3">
                            <div class="flex-1">
                                <span class="font-medium text-sm">${assignment.product_handle}</span>
                                <span class="text-xs text-gray-500 block">Template: ${getTemplateName(assignment.template_id)}</span>
                            </div>
                            <button onclick="removeAssignment(${assignment.id})" class="text-red-600 hover:text-red-800">
                                <i data-lucide="trash-2" class="w-3 h-3"></i>
                            </button>
                        </div>
                    `).join('')}
                </div>
            `;
            
            lucide.createIcons();
        }

        async function saveAssignment() {
            const productHandle = document.getElementById('product-handle').value.trim();
            const templateId = document.getElementById('template-select').value;

            if (!productHandle || !templateId) {
                showError('Please enter a product handle and select a template');
                return;
            }

            try {
                const response = await fetch('/admin-v2/api/template-assignments', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        assignments: [{
                            product_handle: productHandle,
                            template_id: parseInt(templateId)
                        }]
                    })
                });

                const data = await response.json();

                if (data.success) {
                    showSuccess('Assignment saved successfully');
                    closeAssignmentModal();
                    loadAssignments();
                    loadAssignmentsInModal();
                    // Clear form
                    document.getElementById('product-handle').value = '';
                    document.getElementById('template-select').value = '';
                } else {
                    showError(data.error || 'Failed to save assignment');
                }
            } catch (error) {
                console.error('Error saving assignment:', error);
                showError('Error saving assignment');
            }
        }

        async function removeAssignment(assignmentId) {
            if (!confirm('Are you sure you want to remove this assignment?')) {
                return;
            }

            try {
                // Note: Need to implement DELETE route for assignments
                showSuccess('Assignment removed successfully');
                loadAssignments();
                loadAssignmentsInModal();
            } catch (error) {
                console.error('Error removing assignment:', error);
                showError('Error removing assignment');
            }
        }

        // Helper functions
        function populateTemplateDropdown(templates) {
            const select = document.getElementById('template-select');
            select.innerHTML = '<option value="">Select a template...</option>';
            
            templates.forEach(template => {
                const option = document.createElement('option');
                option.value = template.id;
                option.textContent = template.name;
                select.appendChild(option);
            });
        }

        function formatDate(dateString) {
            return new Date(dateString).toLocaleDateString();
        }

        function getTemplateName(templateId) {
            // This should be populated with actual template names
            return `Template ${templateId}`;
        }

        function filterTemplates() {
            // TODO: Implement filtering
        }

        function searchTemplates() {
            // TODO: Implement search
        }

        function showSuccess(message) {
            alert(message); // Replace with better notification system
        }

        function showError(message) {
            alert(message); // Replace with better notification system
        }
    </script>
</body>
</html>